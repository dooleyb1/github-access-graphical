{"ast":null,"code":"'use strict';\n\nmodule.exports = request;\n\nvar fetch = require('node-fetch').default;\n\nvar debug = require('debug')('octokit:rest');\n\nvar defaults = require('lodash/defaults');\n\nvar isPlainObject = require('lodash/isPlainObject');\n\nvar pick = require('lodash/pick');\n\nvar deprecate = require('../deprecate');\n\nvar getBuffer = require('./get-buffer-response');\n\nvar HttpError = require('./http-error');\n\nfunction request(requestOptions) {\n  debug('REQUEST:', requestOptions); // calculate content length unless body is a stream, in which case the\n  // content length is already set per option\n\n  if (requestOptions.body) {\n    defaults(requestOptions.headers, {\n      'content-type': 'application/json; charset=utf-8'\n    });\n  } // https://fetch.spec.whatwg.org/#methods\n\n\n  requestOptions.method = requestOptions.method.toUpperCase(); // GitHub expects \"content-length: 0\" header for PUT/PATCH requests without body\n  // fetch does not allow to set `content-length` header, but we can set body to an empty string\n\n  if (['PATCH', 'PUT'].indexOf(requestOptions.method) >= 0 && !requestOptions.body) {\n    requestOptions.body = '';\n  }\n\n  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {\n    requestOptions.body = JSON.stringify(requestOptions.body);\n  }\n\n  var headers = {};\n  var status;\n  return fetch(requestOptions.url, pick(requestOptions, 'method', 'body', 'headers', 'timeout', 'agent')).then(function (response) {\n    status = response.status;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = response.headers.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var keyAndValue = _step.value;\n        headers[keyAndValue[0]] = keyAndValue[1];\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (status === 204 || status === 205) {\n      return;\n    } // GitHub API returns 200 for HEAD requsets\n\n\n    if (requestOptions.method === 'HEAD') {\n      if (status < 400) {\n        return;\n      }\n\n      throw new HttpError(response.statusText, status, headers);\n    }\n\n    if (status === 304) {\n      requestOptions.url = response.headers.location;\n      throw new HttpError('Not modified', status, headers);\n    }\n\n    if (status >= 400) {\n      return response.text().then(function (message) {\n        throw new HttpError(message, status, headers);\n      });\n    }\n\n    var contentType = response.headers.get('content-type');\n\n    if (/application\\/json/.test(contentType)) {\n      return response.json();\n    }\n\n    if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n      return response.text();\n    }\n\n    return getBuffer(response);\n  }).then(function (data) {\n    return {\n      data: data,\n      status: status,\n      headers: headers,\n\n      get meta() {\n        deprecate('response.meta â€“ use response.headers instead (#896)');\n        return headers;\n      }\n\n    };\n  }).catch(function (error) {\n    if (error instanceof HttpError) {\n      throw error;\n    }\n\n    throw new HttpError(error.message, 500, headers);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}