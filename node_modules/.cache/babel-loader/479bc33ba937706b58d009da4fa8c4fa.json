{"ast":null,"code":"'use strict';\n\nmodule.exports = restEndpoint;\n\nvar defaultsDeep = require('lodash/defaultsDeep');\n\nvar intersection = require('lodash/intersection');\n\nvar mapKeys = require('lodash/mapKeys');\n\nvar omit = require('lodash/omit');\n\nvar urlTemplate = require('url-template');\n\nvar getUserAgent = require('universal-user-agent');\n\nvar addQueryParameters = require('./add-query-parameters');\n\nvar extractUrlVariableNames = require('./extract-url-variable-names');\n\nvar pkg = require('../../package.json');\n\nvar DEFAULTS = module.exports.DEFAULTS = require('./defaults');\n\nvar NON_PARAMETERS = ['request', 'baseUrl'];\n\nfunction restEndpoint(options) {\n  // lowercase header names (#760)\n  options.headers = mapKeys(options.headers, function (value, key) {\n    return key.toLowerCase();\n  });\n  var userAgent = \"octokit.js/\".concat(pkg.version, \" \").concat(getUserAgent());\n\n  if (options.headers['user-agent']) {\n    userAgent = \"\".concat(options.headers['user-agent'], \" \").concat(userAgent);\n  }\n\n  options.headers['user-agent'] = userAgent;\n  options = defaultsDeep({}, options, DEFAULTS);\n  var method = options.method.toLowerCase();\n  var baseUrl = options.baseUrl;\n  var url = options.url;\n  var body = options.body;\n  var headers = options.headers;\n  var remainingOptions = omit(options, ['method', 'baseUrl', 'url', 'headers']); // replace :varname with {varname} to make it RFC 6570 compatible\n\n  url = url.replace(/:([a-z]\\w+)/g, '{+$1}'); // extract variable names from URL to calculate remaining variables later\n\n  var urlVariableNames = extractUrlVariableNames(url);\n  url = urlTemplate.parse(url).expand(remainingOptions);\n\n  if (!/^http/.test(url)) {\n    url = baseUrl + url;\n  }\n\n  var requestOptions = remainingOptions.request;\n  remainingOptions = omit(remainingOptions, intersection(Object.keys(options), urlVariableNames).concat(NON_PARAMETERS));\n\n  if (method === 'get' || method === 'head') {\n    url = addQueryParameters(url, remainingOptions);\n  } else {\n    if ('input' in remainingOptions) {\n      body = remainingOptions.input;\n    } else {\n      body = Object.keys(remainingOptions).length ? remainingOptions : undefined;\n    }\n  }\n\n  return Object.assign(requestOptions, {\n    method: method,\n    url: url,\n    headers: headers,\n    body: body\n  });\n}","map":null,"metadata":{},"sourceType":"script"}