{"ast":null,"code":"module.exports = parseOptions;\n\nvar defaults = require('lodash/defaults');\n\nvar pick = require('lodash/pick');\n\nvar deprecate = require('./deprecate');\n\nvar getRequestAgent = require('./get-request-agent');\n\nvar DEFAULTS = require('./defaults');\n\nvar OPTION_NAMES = ['timeout', 'baseUrl', 'agent', 'headers'];\n\nfunction parseOptions(userOptions) {\n  if (!userOptions) {\n    userOptions = {};\n  }\n\n  if ('followRedirects' in userOptions) {\n    deprecate('followRedirects option is no longer supported. All redirects are followed correctly');\n  }\n\n  if ('protocol' in userOptions) {\n    deprecate('protocol option is no longer supported');\n  }\n\n  if ('host' in userOptions) {\n    deprecate('host option is no longer supported');\n  }\n\n  if ('port' in userOptions) {\n    deprecate('port option is no longer supported');\n  }\n\n  if ('pathPrefix' in userOptions) {\n    deprecate('pathPrefix option is no longer supported');\n  }\n\n  if ('Promise' in userOptions) {\n    deprecate('Promise option is no longer supported. The native Promise API is used');\n  }\n\n  var options = defaults(pick(userOptions, OPTION_NAMES), DEFAULTS);\n  var clientDefaults = {\n    baseUrl: options.baseUrl,\n    headers: options.headers,\n    request: {\n      timeout: options.timeout\n    }\n  };\n\n  if (userOptions.protocol) {\n    clientDefaults.baseUrl = \"\".concat(userOptions.protocol, \"://\").concat(userOptions.host);\n    /* istanbul ignore else */\n\n    if (userOptions.port) {\n      clientDefaults.baseUrl += \":\".concat(userOptions.port);\n    } // Check if a prefix is passed in the options and strip any leading or trailing slashes from it.\n\n    /* istanbul ignore else */\n\n\n    if (userOptions.pathPrefix) {\n      clientDefaults.baseUrl += '/' + userOptions.pathPrefix.replace(/(^[/]+|[/]+$)/g, '');\n    }\n  }\n  /* istanbul ignore else */\n\n\n  if (!process.browser) {\n    clientDefaults.request.agent = getRequestAgent(clientDefaults.baseUrl, userOptions);\n  }\n\n  return clientDefaults;\n}","map":null,"metadata":{},"sourceType":"script"}